// --------------------------------------------------------------------------------------------------------------------
// <copyright file="Extensions.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.ParameterValidation source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.ParameterValidation
{
    /// <summary>
    /// Extension methods.
    /// </summary>
#if !OBeautifulCodeParameterValidationRecipesProject
    [System.Diagnostics.DebuggerStepThrough]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.ParameterValidation", "See package version number")]
    internal
#else
    public
#endif
        static class Extensions
    {
        /// <summary>
        /// Specifies the name of the parameter.
        /// </summary>
        /// <param name="value">The value of the parameter.</param>
        /// <param name="name">The name of the parameter.</param>
        /// <returns>
        /// The parameter to validate.
        /// </returns>
        public static Parameter Named(
            this object value,
            string name)
        {
            var result = new Parameter
            {
                Value = value,
                Name = name,
            };

            return result;
        }

        /// <summary>
        /// Initializes a parameter for validation.
        /// </summary>
        /// <param name="value">The value of the parameter.</param>
        /// <returns>
        /// The parameter to validate.
        /// </returns>
        public static Parameter Must(
            this object value)
        {
            // it a parameter itself? pass-thru
            if (value is Parameter passThru)
            {
                return passThru;
            }

            // is anonymous type?
            // https://stackoverflow.com/a/15273117/356790
            var valueType = value.GetType();
            if (valueType.Namespace == null)
            {
                // with one property?  that's the parameter we are trying to validate.
                var properties = valueType.GetProperties();
                if (properties.Length == 1)
                {
                    var parameterInAnonymousObject = new Parameter
                    {
                        Value = properties[0].GetValue(value, null),
                        Name = properties[0].Name,
                    };

                    return parameterInAnonymousObject;
                }
            }

            var directParameter = new Parameter
            {
                Value = value,
            };

            return directParameter;
        }

        /// <summary>
        /// Specifies another validation.
        /// </summary>
        /// <param name="parameter">The parameter.</param>
        /// <returns>
        /// The parameter to validate.
        /// </returns>
        public static Parameter And(
            this Parameter parameter)
        {
            return parameter;
        }
    }
}
