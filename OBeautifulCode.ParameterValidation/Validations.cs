// --------------------------------------------------------------------------------------------------------------------
// <copyright file="Validations.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.ParameterValidation source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

// ReSharper disable once CheckNamespace
namespace OBeautifulCode.ParameterValidation.Recipes
{
    using System;
    using System.Collections;

    using static System.FormattableString;

    /// <summary>
    /// Contains all validations that can be applied to a <see cref="Parameter"/>.
    /// </summary>
#if !OBeautifulCodeParameterValidationRecipesProject
    [System.Diagnostics.DebuggerStepThrough]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.ParameterValidation", "See package version number")]
    internal
#else
    public
#endif
        static class Validations
    {
        /// <summary>
        /// Validates that the parameter is null.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Rationale for the validation.  Replaces the default exception message constructed by this validation.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter BeNull(
            this Parameter parameter,
            string because = null)
        {
            if (!ReferenceEquals(parameter.Value, null))
            {
                throw new ArgumentException(because ?? Invariant($"parameter is not null"), parameter.Name);
            }

            return parameter;
        }

        /// <summary>
        /// Validates that the parameter is not null.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Rationale for the validation.  Replaces the default exception message constructed by this validation.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter NotBeNull(
            this Parameter parameter,
            string because = null)
        {
            if (ReferenceEquals(parameter.Value, null))
            {
                throw new ArgumentNullException(parameter.Name, because);
            }

            return parameter;
        }

        /// <summary>
        /// Validates that a <see cref="string"/> is null or white space.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Rationale for the validation.  Replaces the default exception message constructed by this validation.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter BeNullOrWhiteSpace(
            this Parameter parameter,
            string because = null)
        {
            if (!ReferenceEquals(parameter.Value, null))
            {
                if (parameter.Value is string valueAsString)
                {
                    if (!string.IsNullOrWhiteSpace(valueAsString))
                    {
                        throw new ArgumentException(because ?? Invariant($"{nameof(String)} parameter is not null and not white space"), parameter.Name);
                    }
                }
                else
                {
                    ThrowOnUnexpectedType(nameof(NotBeNullOrWhiteSpace), nameof(String));
                }
            }

            return parameter;
        }

        /// <summary>
        /// Validates that a <see cref="string"/> is not null or white space.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Rationale for the validation.  Replaces the default exception message constructed by this validation.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter NotBeNullOrWhiteSpace(
            this Parameter parameter,
            string because = null)
        {
            parameter.NotBeNull();

            if (parameter.Value is string valueAsString)
            {
                if (string.IsNullOrWhiteSpace(valueAsString))
                {
                    throw new ArgumentException(because ?? Invariant($"{nameof(String)} parameter is white space"), parameter.Name);
                }
            }
            else
            {
                ThrowOnUnexpectedType(nameof(NotBeNullOrWhiteSpace), nameof(String));
            }

            return parameter;
        }

        /// <summary>
        /// Validates that an <see cref="IEnumerable"/> is empty.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Rationale for the validation.  Replaces the default exception message constructed by this validation.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter BeEmpty(
            this Parameter parameter,
            string because = null)
        {
            parameter.NotBeNull();

            if (parameter.Value is IEnumerable valueAsEnumerable)
            {
                foreach (var unused in valueAsEnumerable)
                {
                    throw new ArgumentException(because ?? Invariant($"{nameof(IEnumerable)} parameter is not empty"), parameter.Name);
                }
            }
            else
            {
                ThrowOnUnexpectedType(nameof(NotBeEmpty), nameof(IEnumerable));
            }

            return parameter;
        }

        /// <summary>
        /// Validates that an <see cref="IEnumerable"/> is not empty.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Rationale for the validation.  Replaces the default exception message constructed by this validation.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter NotBeEmpty(
            this Parameter parameter,
            string because = null)
        {
            parameter.NotBeNull();

            if (parameter.Value is IEnumerable valueAsEnumerable)
            {
                foreach (var unused in valueAsEnumerable)
                {
                    return parameter;
                }

                throw new ArgumentException(because ?? Invariant($"{nameof(IEnumerable)} parameter is empty"), parameter.Name);
            }
            else
            {
                ThrowOnUnexpectedType(nameof(NotBeEmpty), nameof(IEnumerable));
            }

            return parameter;
        }

        /// <summary>
        /// Validates that an <see cref="IEnumerable"/> contains at least one null elements.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Rationale for the validation.  Replaces the default exception message constructed by this validation.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter ContainSomeNulls(
            this Parameter parameter,
            string because = null)
        {
            parameter.NotBeNull();

            if (parameter.Value is IEnumerable valueAsEnumerable)
            {
                foreach (var element in valueAsEnumerable)
                {
                    if (ReferenceEquals(element, null))
                    {
                        return parameter;
                    }
                }

                throw new ArgumentException(because ?? Invariant($"{nameof(IEnumerable)} parameter does not contain any null elements"), parameter.Name);
            }
            else
            {
                ThrowOnUnexpectedType(nameof(NotBeEmpty), nameof(IEnumerable));
            }

            return parameter;
        }

        /// <summary>
        /// Validates that an <see cref="IEnumerable"/> does not contain any null elements.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Rationale for the validation.  Replaces the default exception message constructed by this validation.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter NotContainAnyNulls(
            this Parameter parameter,
            string because = null)
        {
            parameter.NotBeNull();

            if (parameter.Value is IEnumerable valueAsEnumerable)
            {
                foreach (var element in valueAsEnumerable)
                {
                    if (ReferenceEquals(element, null))
                    {
                        throw new ArgumentException(because ?? Invariant($"{nameof(IEnumerable)} parameter contains a null element"), parameter.Name);
                    }
                }
            }
            else
            {
                ThrowOnUnexpectedType(nameof(NotBeEmpty), nameof(IEnumerable));
            }

            return parameter;
        }

        /// <summary>
        /// Validates that an <see cref="IEnumerable"/> is not null, not empty, and does not contain any null elements.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Rationale for the validation.  Replaces the default exception message constructed by this validation.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter NotBeNullNorEmptyNorContainAnyNulls(
            this Parameter parameter,
            string because = null)
        {
            parameter.NotBeNull(because);
            parameter.NotBeEmpty(because);
            parameter.NotContainAnyNulls(because);
            return parameter;
        }

        private static void ThrowOnUnexpectedType(
            string validationName,
            string expectedType)
        {
            throw new InvalidCastException(Invariant($"called {validationName} on an object that is not of type {expectedType}"));
        }
    }
}
