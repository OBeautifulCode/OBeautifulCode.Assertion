// --------------------------------------------------------------------------------------------------------------------
// <copyright file="ParameterValidation.Private.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.Validation source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Validation.Recipes
{
    using System;
    using System.Collections;

    /// <summary>
    /// Contains all validations that can be applied to a <see cref="Parameter"/>.
    /// </summary>
#if !OBeautifulCodeValidationRecipesProject
    [System.Diagnostics.DebuggerStepThrough]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.Validation", "See package version number")]
    internal
#else
    public
#endif
        static partial class ParameterValidation
    {
        private static void BeNull(
            string validationName,
            object value,
            Type valueType,
            string parameterName,
            string because,
            bool isElementInEnumerable,
            params ValidationParameter[] validationParameters)
        {
            if (!ReferenceEquals(value, null))
            {
                var exceptionMessage = BuildExceptionMessage(parameterName, because, isElementInEnumerable, BeNullExceptionMessageSuffix);
                throw new ArgumentException(exceptionMessage);
            }
        }

        private static void NotBeNull(
            string validationName,
            object value,
            Type valueType,
            string parameterName,
            string because,
            bool isElementInEnumerable,
            params ValidationParameter[] validationParameters)
        {
            if (ReferenceEquals(value, null))
            {
                var exceptionMessage = BuildExceptionMessage(parameterName, because, isElementInEnumerable, NotBeNullExceptionMessageSuffix);
                if (isElementInEnumerable)
                {
                    throw new ArgumentException(exceptionMessage);
                }
                else
                {
                    throw new ArgumentNullException(null, exceptionMessage);
                }
            }
        }

        private static void BeTrue(
            string validationName,
            object value,
            Type valueType,
            string parameterName,
            string because,
            bool isElementInEnumerable,
            params ValidationParameter[] validationParameters)
        {
            var shouldThrow = ReferenceEquals(value, null) || ((bool)value != true);
            if (shouldThrow)
            {
                var exceptionMessage = BuildExceptionMessage(parameterName, because, isElementInEnumerable, BeTrueExceptionMessageSuffix);
                throw new ArgumentException(exceptionMessage);
            }
        }

        private static void NotBeTrue(
            string validationName,
            object value,
            Type valueType,
            string parameterName,
            string because,
            bool isElementInEnumerable,
            params ValidationParameter[] validationParameters)
        {
            var shouldNotThrow = ReferenceEquals(value, null) || ((bool)value == false);
            if (!shouldNotThrow)
            {
                var exceptionMessage = BuildExceptionMessage(parameterName, because, isElementInEnumerable, NotBeTrueExceptionMessageSuffix);
                throw new ArgumentException(exceptionMessage);
            }
        }

        private static void BeFalse(
            string validationName,
            object value,
            Type valueType,
            string parameterName,
            string because,
            bool isElementInEnumerable,
            params ValidationParameter[] validationParameters)
        {
            var shouldThrow = ReferenceEquals(value, null) || (bool)value;
            if (shouldThrow)
            {
                var exceptionMessage = BuildExceptionMessage(parameterName, because, isElementInEnumerable, BeFalseExceptionMessageSuffix);
                throw new ArgumentException(exceptionMessage);
            }
        }

        private static void NotBeFalse(
            string validationName,
            object value,
            Type valueType,
            string parameterName,
            string because,
            bool isElementInEnumerable,
            params ValidationParameter[] validationParameters)
        {
            var shouldNotThrow = ReferenceEquals(value, null) || (bool)value;
            if (!shouldNotThrow)
            {
                var exceptionMessage = BuildExceptionMessage(parameterName, because, isElementInEnumerable, NotBeFalseExceptionMessageSuffix);
                throw new ArgumentException(exceptionMessage);
            }
        }

        private static void NotBeNullNorWhiteSpace(
            string validationName,
            object value,
            Type valueType,
            string parameterName,
            string because,
            bool isElementInEnumerable,
            params ValidationParameter[] validationParameters)
        {
            NotBeNull(validationName, value, valueType, parameterName, because, isElementInEnumerable);

            var shouldThrow = string.IsNullOrWhiteSpace((string)value);
            if (shouldThrow)
            {
                var exceptionMessage = BuildExceptionMessage(parameterName, because, isElementInEnumerable, NotBeNullNorWhiteSpaceExceptionMessageSuffix);
                throw new ArgumentException(exceptionMessage);
            }
        }

        private static void BeEmptyGuid(
            string validationName,
            object value,
            Type valueType,
            string parameterName,
            string because,
            bool isElementInEnumerable,
            params ValidationParameter[] validationParameters)
        {
            var shouldThrow = ReferenceEquals(value, null) || ((Guid)value != Guid.Empty);
            if (shouldThrow)
            {
                var exceptionMessage = BuildExceptionMessage(parameterName, because, isElementInEnumerable, BeEmptyGuidExceptionMessageSuffix);
                throw new ArgumentException(exceptionMessage);
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1820:TestForEmptyStringsUsingStringLength", Justification = "string.IsNullOrEmpty does not work here")]
        private static void BeEmptyString(
            string validationName,
            object value,
            Type valueType,
            string parameterName,
            string because,
            bool isElementInEnumerable,
            params ValidationParameter[] validationParameters)
        {
            var shouldThrow = (string)value != string.Empty;

            if (shouldThrow)
            {
                var exceptionMessage = BuildExceptionMessage(parameterName, because, isElementInEnumerable, BeEmptyStringExceptionMessageSuffix);
                throw new ArgumentException(exceptionMessage);
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals", MessageId = "unused", Justification = "Cannot iterate without a local")]
        private static void BeEmptyEnumerable(
            string validationName,
            object value,
            Type valueType,
            string parameterName,
            string because,
            bool isElementInEnumerable,
            params ValidationParameter[] validationParameters)
        {
            NotBeNull(validationName, value, valueType, parameterName, because, isElementInEnumerable);

            var valueAsEnumerable = value as IEnumerable;
            var shouldThrow = false;

            // ReSharper disable once PossibleNullReferenceException
            foreach (var unused in valueAsEnumerable)
            {
                shouldThrow = true;
                break;
            }

            if (shouldThrow)
            {
                var exceptionMessage = BuildExceptionMessage(parameterName, because, isElementInEnumerable, BeEmptyEnumerableExceptionMessageSuffix);
                throw new ArgumentException(exceptionMessage);
            }
        }

        private static void NotBeEmptyGuid(
            string validationName,
            object value,
            Type valueType,
            string parameterName,
            string because,
            bool isElementInEnumerable,
            params ValidationParameter[] validationParameters)
        {
            var shouldThrow = (!ReferenceEquals(value, null)) && ((Guid)value == Guid.Empty);
            if (shouldThrow)
            {
                var exceptionMessage = BuildExceptionMessage(parameterName, because, isElementInEnumerable, NotBeEmptyGuidExceptionMessageSuffix);
                throw new ArgumentException(exceptionMessage);
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1820:TestForEmptyStringsUsingStringLength", Justification = "string.IsNullOrEmpty does not work here")]
        private static void NotBeEmptyString(
            string validationName,
            object value,
            Type valueType,
            string parameterName,
            string because,
            bool isElementInEnumerable,
            params ValidationParameter[] validationParameters)
        {
            var shouldThrow = (string)value == string.Empty;

            if (shouldThrow)
            {
                var exceptionMessage = BuildExceptionMessage(parameterName, because, isElementInEnumerable, NotBeEmptyStringExceptionMessageSuffix);
                throw new ArgumentException(exceptionMessage);
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals", MessageId = "unused", Justification = "Cannot iterate without a local")]
        private static void NotBeEmptyEnumerable(
            string validationName,
            object value,
            Type valueType,
            string parameterName,
            string because,
            bool isElementInEnumerable,
            params ValidationParameter[] validationParameters)
        {
            NotBeNull(validationName, value, valueType, parameterName, because, isElementInEnumerable);

            var valueAsEnumerable = value as IEnumerable;
            var shouldThrow = true;

            // ReSharper disable once PossibleNullReferenceException
            foreach (var unused in valueAsEnumerable)
            {
                shouldThrow = false;
                break;
            }

            if (shouldThrow)
            {
                var exceptionMessage = BuildExceptionMessage(parameterName, because, isElementInEnumerable, NotBeEmptyEnumerableExceptionMessageSuffix);
                throw new ArgumentException(exceptionMessage);
            }
        }

        private static void ContainSomeNulls(
            string validationName,
            object value,
            Type valueType,
            string parameterName,
            string because,
            bool isElementInEnumerable,
            params ValidationParameter[] validationParameters)
        {
            NotBeNull(validationName, value, valueType, parameterName, because, isElementInEnumerable);

            var valueAsEnumerable = value as IEnumerable;
            var shouldThrow = true;

            // ReSharper disable once PossibleNullReferenceException
            foreach (var unused in valueAsEnumerable)
            {
                if (ReferenceEquals(unused, null))
                {
                    shouldThrow = false;
                    break;
                }
            }

            if (shouldThrow)
            {
                var exceptionMessage = BuildExceptionMessage(parameterName, because, isElementInEnumerable, ContainSomeNullsExceptionMessageSuffix);
                throw new ArgumentException(exceptionMessage);
            }
        }

        private static void NotContainAnyNulls(
            string validationName,
            object value,
            Type valueType,
            string parameterName,
            string because,
            bool isElementInEnumerable,
            params ValidationParameter[] validationParameters)
        {
            NotBeNull(validationName, value, valueType, parameterName, because, isElementInEnumerable);

            var valueAsEnumerable = value as IEnumerable;
            var shouldThrow = false;

            // ReSharper disable once PossibleNullReferenceException
            foreach (var unused in valueAsEnumerable)
            {
                if (ReferenceEquals(unused, null))
                {
                    shouldThrow = true;
                    break;
                }
            }

            if (shouldThrow)
            {
                var exceptionMessage = BuildExceptionMessage(parameterName, because, isElementInEnumerable, NotContainAnyNullsExceptionMessageSuffix);
                throw new ArgumentException(exceptionMessage);
            }
        }

        private static void BeDefault(
            string validationName,
            object value,
            Type valueType,
            string parameterName,
            string because,
            bool isElementInEnumerable,
            params ValidationParameter[] validationParameters)
        {
            var defaultValue = GetDefaultValue(valueType);
            var shouldThrow = !IsEqualUsingDefaultEqualityComparer(valueType, value, defaultValue);
            if (shouldThrow)
            {
                var exceptionMessage = BuildExceptionMessage(parameterName, because, isElementInEnumerable, BeDefaultExceptionMessageSuffix);
                throw new ArgumentException(exceptionMessage);
            }
        }

        private static void NotBeDefault(
            string validationName,
            object value,
            Type valueType,
            string parameterName,
            string because,
            bool isElementInEnumerable,
            params ValidationParameter[] validationParameters)
        {
            var defaultValue = GetDefaultValue(valueType);
            var shouldThrow = IsEqualUsingDefaultEqualityComparer(valueType, value, defaultValue);
            if (shouldThrow)
            {
                var exceptionMessage = BuildExceptionMessage(parameterName, because, isElementInEnumerable, NotBeDefaultExceptionMessageSuffix);
                throw new ArgumentException(exceptionMessage);
            }
        }

        private static void BeLessThan(
            string validationName,
            object value,
            Type valueType,
            string parameterName,
            string because,
            bool isElementInEnumerable,
            params ValidationParameter[] validationParameters)
        {
            var shouldThrow = CompareUsingDefaultComparer(valueType, value, validationParameters[0].Value) != CompareOutcome.Value1LessThanValue2;
            if (shouldThrow)
            {
                var exceptionMessage = BuildExceptionMessage(parameterName, because, isElementInEnumerable, BeLessThanExceptionMessageSuffix);

                if (isElementInEnumerable)
                {
                    throw new ArgumentException(exceptionMessage);
                }
                else
                {
                    throw new ArgumentOutOfRangeException(exceptionMessage, (Exception)null);
                }                
            }
        }
    }
}
