// --------------------------------------------------------------------------------------------------------------------
// <copyright file="ParameterValidation.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.Validation source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Validation.Recipes
{
    using System;
    using System.Collections;

    /// <summary>
    /// Contains all validations that can be applied to a <see cref="Parameter"/>.
    /// </summary>
#if !OBeautifulCodeValidationRecipesProject
    [System.Diagnostics.DebuggerStepThrough]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.Validation", "See package version number")]
    internal
#else
    public
#endif
        static partial class ParameterValidation
    {
        /// <summary>
        /// Validates that the reference type or nullable parameter is null.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Rationale for the validation.  Replaces the default exception message constructed by this validation.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter BeNull(
            [ValidatedNotNull] this Parameter parameter,
            string because = null)
        {
            var typeValidations = new TypeValidation[]
            {
                ThrowIfTypeCannotBeNull,
            };

            parameter.Validate(BeNull, nameof(BeNull), because, typeValidations);
            return parameter;
        }

        /// <summary>
        /// Validates that the reference type or nullable parameter is not null.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Rationale for the validation.  Replaces the default exception message constructed by this validation.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter NotBeNull(
            [ValidatedNotNull] this Parameter parameter,
            string because = null)
        {
            var typeValidations = new TypeValidation[]
            {
                ThrowIfTypeCannotBeNull,
            };

            parameter.Validate(NotBeNull, nameof(NotBeNull), because, typeValidations);
            return parameter;
        }

        /// <summary>
        /// Validates that the bool or bool? parameter is true.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Rationale for the validation.  Replaces the default exception message constructed by this validation.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter BeTrue(
            [ValidatedNotNull] this Parameter parameter,
            string because = null)
        {
            var typeValidations = new TypeValidation[]
            {
                ThrowIfNotOfType
            };

            parameter.Validate(BeTrue, nameof(BeTrue), because, typeValidations, typeof(bool), typeof(bool?));
            return parameter;
        }

        /// <summary>
        /// Validates that the bool or bool? parameter is not true.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Rationale for the validation.  Replaces the default exception message constructed by this validation.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter NotBeTrue(
            [ValidatedNotNull] this Parameter parameter,
            string because = null)
        {
            var typeValidations = new TypeValidation[]
            {
                ThrowIfNotOfType,
            };

            parameter.Validate(NotBeTrue, nameof(NotBeTrue), because, typeValidations, typeof(bool), typeof(bool?));
            return parameter;
        }

        /// <summary>
        /// Validates that the bool or bool? parameter is false.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Rationale for the validation.  Replaces the default exception message constructed by this validation.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter BeFalse(
            [ValidatedNotNull] this Parameter parameter,
            string because = null)
        {
            var typeValidations = new TypeValidation[]
            {
                ThrowIfNotOfType,
            };

            parameter.Validate(BeFalse, nameof(BeFalse), because, typeValidations, typeof(bool), typeof(bool?));
            return parameter;
        }

        /// <summary>
        /// Validates that the bool? or bool? parameter is not false.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Rationale for the validation.  Replaces the default exception message constructed by this validation.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter NotBeFalse(
            [ValidatedNotNull] this Parameter parameter,
            string because = null)
        {
            var typeValidations = new TypeValidation[]
            {
                ThrowIfNotOfType,
            };

            parameter.Validate(NotBeFalse, nameof(NotBeFalse), because, typeValidations, typeof(bool), typeof(bool?));
            return parameter;
        }

        /// <summary>
        /// Validates that the string parameter is neither null nor whitespace.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Rationale for the validation.  Replaces the default exception message constructed by this validation.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter NotBeNullNorWhiteSpace(
            [ValidatedNotNull] this Parameter parameter,
            string because = null)
        {
            var typeValidations = new TypeValidation[]
            {
                ThrowIfNotOfType,
            };

            parameter.Validate(NotBeNullNorWhiteSpace, nameof(NotBeNullNorWhiteSpace), because, typeValidations, typeof(string));
            return parameter;
        }

        /// <summary>
        /// Validates that the guid or guid? is empty.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Rationale for the validation.  Replaces the default exception message constructed by this validation.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter BeEmptyGuid(
            [ValidatedNotNull] this Parameter parameter,
            string because = null)
        {
            var typeValidations = new TypeValidation[]
            {
                ThrowIfNotOfType,
            };

            parameter.Validate(BeEmptyGuid, nameof(BeEmptyGuid), because, typeValidations, typeof(Guid), typeof(Guid?));
            return parameter;
        }

        /// <summary>
        /// Validates that the string parameter is empty.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Rationale for the validation.  Replaces the default exception message constructed by this validation.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter BeEmptyString(
            [ValidatedNotNull] this Parameter parameter,
            string because = null)
        {
            var typeValidations = new TypeValidation[]
            {
                ThrowIfNotOfType,
            };

            parameter.Validate(BeEmptyString, nameof(BeEmptyString), because, typeValidations, typeof(string));
            return parameter;
        }

        /// <summary>
        /// Validates that the IEnumerable parameter is empty.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Rationale for the validation.  Replaces the default exception message constructed by this validation.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter BeEmptyEnumerable(
            [ValidatedNotNull] this Parameter parameter,
            string because = null)
        {
            var typeValidations = new TypeValidation[]
            {
                ThrowIfNotOfType,
            };

            parameter.Validate(BeEmptyEnumerable, nameof(BeEmptyEnumerable), because, typeValidations, typeof(IEnumerable));
            return parameter;
        }

        /// <summary>
        /// Validates that the guid or guid? parameter is not empty.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Rationale for the validation.  Replaces the default exception message constructed by this validation.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter NotBeEmptyGuid(
            [ValidatedNotNull] this Parameter parameter,
            string because = null)
        {
            var typeValidations = new TypeValidation[]
            {
                ThrowIfNotOfType
            };

            parameter.Validate(NotBeEmptyGuid, nameof(NotBeEmptyGuid), because, typeValidations, typeof(Guid), typeof(Guid?));
            return parameter;
        }

        /// <summary>
        /// Validates that the string parameter is not empty.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Rationale for the validation.  Replaces the default exception message constructed by this validation.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter NotBeEmptyString(
            [ValidatedNotNull] this Parameter parameter,
            string because = null)
        {
            var typeValidations = new TypeValidation[]
            {
                ThrowIfNotOfType,
            };

            parameter.Validate(NotBeEmptyString, nameof(NotBeEmptyString), because, typeValidations, typeof(string));
            return parameter;
        }

        /// <summary>
        /// Validates that the IEnumerable parameter is not empty.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Rationale for the validation.  Replaces the default exception message constructed by this validation.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter NotBeEmptyEnumerable(
            [ValidatedNotNull] this Parameter parameter,
            string because = null)
        {
            var typeValidations = new TypeValidation[]
            {
                ThrowIfNotOfType,
            };

            parameter.Validate(NotBeEmptyEnumerable, nameof(NotBeEmptyEnumerable), because, typeValidations, typeof(IEnumerable));
            return parameter;
        }

        /// <summary>
        /// Validates that the IEnumerable parameter contains at least one null element.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Rationale for the validation.  Replaces the default exception message constructed by this validation.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter ContainSomeNulls(
            [ValidatedNotNull] this Parameter parameter,
            string because = null)
        {
            var typeValidations = new TypeValidation[]
            {
                ThrowIfNotOfType,
                ThrowIfEnumerableTypeCannotBeNull,
            };

            parameter.Validate(ContainSomeNulls, nameof(ContainSomeNulls), because, typeValidations, typeof(IEnumerable));
            return parameter;
        }

        /// <summary>
        /// Validates that the IEnumerable parameter does not contain any null elements.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Rationale for the validation.  Replaces the default exception message constructed by this validation.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter NotContainAnyNulls(
            [ValidatedNotNull] this Parameter parameter,
            string because = null)
        {
            var typeValidations = new TypeValidation[]
            {
                ThrowIfNotOfType,
                ThrowIfEnumerableTypeCannotBeNull,
            };

            parameter.Validate(NotContainAnyNulls, nameof(NotContainAnyNulls), because, typeValidations, typeof(IEnumerable));
            return parameter;
        }

        /// <summary>
        /// Validates that the IEnumerable parameter is not null nor empty nor contains any null elements.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Rationale for the validation.  Replaces the default exception message constructed by this validation.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter NotBeNullNorEmptyNorContainAnyNulls(
            [ValidatedNotNull] this Parameter parameter,
            string because = null)
        {
            var typeValidations = new TypeValidation[]
            {
                ThrowIfNotOfType,
                ThrowIfEnumerableTypeCannotBeNull,
            };

            var validationName = nameof(NotBeNullNorEmptyNorContainAnyNulls);

            parameter.Validate(NotBeEmptyEnumerable, validationName, because, typeValidations, typeof(IEnumerable));
            parameter.Validate(NotContainAnyNulls, validationName, because, new TypeValidation[] { });

            return parameter;
        }

        /// <summary>
        /// Validates that the parameter is equal to default(T).
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Rationale for the validation.  Replaces the default exception message constructed by this validation.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter BeDefault(
            [ValidatedNotNull] this Parameter parameter,
            string because = null)
        {
            var typeValidations = new TypeValidation[]
            {
            };

            parameter.Validate(BeDefault, nameof(BeDefault), because, typeValidations);
            return parameter;
        }

        /// <summary>
        /// Validates that the parameter is not equal to default(T).
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Rationale for the validation.  Replaces the default exception message constructed by this validation.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter NotBeDefault(
            [ValidatedNotNull] this Parameter parameter,
            string because = null)
        {
            var typeValidations = new TypeValidation[]
            {
            };

            parameter.Validate(NotBeDefault, nameof(NotBeDefault), because, typeValidations);
            return parameter;
        }

        /// <summary>
        /// Always throws.
        /// </summary>
        /// <param name="parameter">The parameter to validate.</param>
        /// <param name="because">Rationale for the validation.  Replaces the default exception message constructed by this validation.</param>
        /// <returns>
        /// The validated parameter.
        /// </returns>
        public static Parameter BeOfTypeThatDoesNotExist(
            [ValidatedNotNull] this Parameter parameter,
            string because = null)
        {
            var typeValidations = new TypeValidation[]
            {
                Throw,
            };

            parameter.Validate(null, nameof(BeOfTypeThatDoesNotExist), because, typeValidations);
            return parameter;
        }        
    }
}
