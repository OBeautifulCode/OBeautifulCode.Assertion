// --------------------------------------------------------------------------------------------------------------------
// <copyright file="ParameterValidation.Utility.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.Validation source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Validation.Recipes
{
    using System;
    using System.Collections;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Linq;
    using System.Reflection;

    using static System.FormattableString;

    /// <summary>
    /// Contains all validations that can be applied to a <see cref="Parameter"/>.
    /// </summary>
#if !OBeautifulCodeValidationRecipesProject
    [System.Diagnostics.DebuggerStepThrough]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.Validation", "See package version number")]
    internal
#else
    public
#endif
        static partial class ParameterValidation
    {
        private static readonly MethodInfo GetDefaultValueOpenGenericMethodInfo = ((Func<object>)GetDefaultValue<object>).Method.GetGenericMethodDefinition();

        private static readonly ConcurrentDictionary<Type, MethodInfo> GetDefaultValueTypeToMethodInfoMap = new ConcurrentDictionary<Type, MethodInfo>();

        private static readonly MethodInfo IsEqualUsingDefaultEqualityComparerOpenGenericMethodInfo = ((Func<object, object, bool>)IsEqualUsingDefaultEqualityComparer).Method.GetGenericMethodDefinition();

        private static readonly ConcurrentDictionary<Type, MethodInfo> IsEqualUsingDefaultEqualityComparerTypeToMethodInfoMap = new ConcurrentDictionary<Type, MethodInfo>();

        private delegate void TypeValidation(string validationName, bool isElementInEnumerable, Type valueType, params Type[] referenceTypes);

        private delegate void ValueValidation(object value, Type valueType, string parameterName, string because, bool isElementInEnumerable);

        private static void Validate(
            this Parameter parameter,
            ValueValidation valueValidation,
            string validationName,
            string because,
            IReadOnlyCollection<TypeValidation> typeValidations,
            params Type[] referenceTypes)
        {
            ParameterValidator.ThrowOnImproperUseOfFrameworkIfDetected(parameter, ParameterShould.BeMusted);

            if (parameter.HasBeenEached)
            {
                if (parameter.Value is IEnumerable valueAsEnumerable)
                {
                    var enumerableType = GetEnumerableGenericType(parameter.ValueType);

                    foreach (var typeValidation in typeValidations)
                    {
                        typeValidation(validationName, true, enumerableType, referenceTypes);
                    }

                    foreach (var element in valueAsEnumerable)
                    {
                        valueValidation(element, enumerableType, parameter.Name, because, isElementInEnumerable: true);
                    }
                }
                else
                {
                    // Each() calls:
                    // - ThrowOnImproperUseOfFramework when the parameter value is null
                    // - ThrowOnUnexpectedType when the parameter value is not an Enumerable
                    // so if we get here, the caller is trying to hack the framework
                    ParameterValidator.ThrowOnImproperUseOfFramework();
                }
            }
            else
            {
                foreach (var typeValidation in typeValidations)
                {
                    typeValidation(validationName, false, parameter.ValueType, referenceTypes);
                }

                valueValidation(parameter.Value, parameter.ValueType, parameter.Name, because, isElementInEnumerable: false);
            }

            parameter.HasBeenValidated = true;
        }

        private static Type GetEnumerableGenericType(
            Type type)
        {
            // adapted from: https://stackoverflow.com/a/17713382/356790
            Type result;
            if (type.IsArray)
            {
                // type is array, shortcut
                result = type.GetElementType();
            }
            else if (type.IsGenericType && (type.GetGenericTypeDefinition() == typeof(IEnumerable<>)))
            {
                // type is IEnumerable<T>
                result = type.GetGenericArguments()[0];
            }
            else
            {
                // type implements/extends IEnumerable<T>
                result = type
                    .GetInterfaces()
                    .Where(_ => _.IsGenericType && _.GetGenericTypeDefinition() == typeof(IEnumerable<>))
                    .Select(_ => _.GenericTypeArguments[0])
                    .FirstOrDefault();

                if (result == null)
                {
                    result = typeof(object);
                }
            }

            return result;
        }

        private static void Throw(
            string validationName,
            bool isElementInEnumerable,
            Type valueType,
            params Type[] referenceTypes)
        {
            var parameterValueTypeName = valueType.GetFriendlyTypeName();
            throw new InvalidCastException(Invariant($"validationName: {validationName}, isElementInEnumerable: {isElementInEnumerable}, parameterValueTypeName: {parameterValueTypeName}"));
        }

        private static void ThrowIfTypeCannotBeNull(
            string validationName,
            bool isElementInEnumerable,
            Type valueType,
            params Type[] referenceTypes)
        {
            if (valueType.IsValueType && (Nullable.GetUnderlyingType(valueType) == null))
            {
                ParameterValidator.ThrowOnUnexpectedTypes(validationName, isElementInEnumerable, "Any Reference Type", "Nullable<T>");
            }
        }

        private static void ThrowIfEnumerableTypeCannotBeNull(
            string validationName,
            bool isElementInEnumerable,
            Type valueType,
            params Type[] referenceTypes)
        {
            var enumerableType = GetEnumerableGenericType(valueType);

            if (enumerableType.IsValueType && (Nullable.GetUnderlyingType(enumerableType) == null))
            {
                ParameterValidator.ThrowOnUnexpectedTypes(validationName, isElementInEnumerable, "IEnumerable", "IEnumerable<Any Reference Type>", "IEnumerable<Nullable<T>>");
            }
        }

        private static void ThrowIfNotOfType(
            string validationName,
            bool isElementInEnumerable,
            Type valueType,
            params Type[] validTypes)
        {
            if ((!validTypes.Contains(valueType)) && (!validTypes.Any(_ => _.IsAssignableFrom(valueType))))
            {
                ParameterValidator.ThrowOnUnexpectedTypes(validationName, isElementInEnumerable, validTypes);
            }
        }

        private static string BuildExceptionMessage(
            string parameterName,
            string because,
            bool isElementInEnumerable,
            string exceptionMessageSuffix)
        {
            if (because != null)
            {
                return because;
            }

            var parameterNameQualifier = parameterName == null ? string.Empty : Invariant($" '{parameterName}'");
            var enumerableQualifier = isElementInEnumerable ? " contains an element that" : string.Empty;
            var result = Invariant($"parameter{parameterNameQualifier}{enumerableQualifier} {exceptionMessageSuffix}");
            return result;
        }

        private static T GetDefaultValue<T>()
        {
            var result = default(T);
            return result;
        }

        private static object GetDefaultValue(
            Type type)
        {
            if (!GetDefaultValueTypeToMethodInfoMap.ContainsKey(type))
            {
                GetDefaultValueTypeToMethodInfoMap.TryAdd(type, GetDefaultValueOpenGenericMethodInfo.MakeGenericMethod(type));
            }

            var result = GetDefaultValueTypeToMethodInfoMap[type].Invoke(null, null);
            return result;
        }

        private static bool IsEqualUsingDefaultEqualityComparer<T>(
            T x,
            T y)
        {
            var result = EqualityComparer<T>.Default.Equals(x, y);
            return result;
        }

        private static bool IsEqualUsingDefaultEqualityComparer(
            Type type,
            object value1,
            object value2)
        {
            if (!IsEqualUsingDefaultEqualityComparerTypeToMethodInfoMap.ContainsKey(type))
            {
                IsEqualUsingDefaultEqualityComparerTypeToMethodInfoMap.TryAdd(type, IsEqualUsingDefaultEqualityComparerOpenGenericMethodInfo.MakeGenericMethod(type));
            }

            var result = (bool)IsEqualUsingDefaultEqualityComparerTypeToMethodInfoMap[type].Invoke(null, new[] { value1, value2 });
            return result;
        }
    }
}
