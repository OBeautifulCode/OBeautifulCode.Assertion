// --------------------------------------------------------------------------------------------------------------------
// <copyright file="DictionaryExtensions.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.Validation source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Validation.Recipes
{
    using System;
    using System.Collections;
    using System.Collections.Generic;

    /// <summary>
    /// Extension methods on type <see cref="IDictionary{TKey, TValue}"/> and <see cref="IReadOnlyDictionary{TKey, TValue}" />.
    /// </summary>
#if !OBeautifulCodeValidationRecipesProject
    [System.Diagnostics.DebuggerStepThrough]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.Validation", "See package version number")]
    internal
#else
    public
#endif
        static class DictionaryExtensions
    {
        /// <summary>
        /// Converts a generic dictionary to a non-generic dictionary.
        /// </summary>
        /// <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
        /// <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        /// <param name="value">The dictionary to convert.</param>
        /// <returns>
        /// The specified generic dictionary converted to a non-generic dictionary.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="value"/>is null.</exception>
        public static IDictionary ToNonGenericDictionary<TKey, TValue>(
            IEnumerable<KeyValuePair<TKey, TValue>> value)
        {
            new { value }.Must().NotBeNull();

            var result = new Hashtable();
            foreach (var item in value)
            {
                result.Add(item.Key, item.Value);
            }

            return result;
        }
    }
}
