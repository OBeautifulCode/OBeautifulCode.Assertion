// --------------------------------------------------------------------------------------------------------------------
// <copyright file="ParameterValidation.Internal.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.Validation source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Validation.Recipes
{
    using System;
    using System.Collections;

    /// <summary>
    /// Contains all validations that can be applied to a <see cref="Parameter"/>.
    /// </summary>
#if !OBeautifulCodeValidationRecipesProject
    internal
#else
    public
#endif
        static partial class ParameterValidation
    {
        private delegate void ValueValidationHandler(
            ValueValidation valueValidation);

        private static void BeNullInternal(
            ValueValidation valueValidation)
        {
            if (!ReferenceEquals(valueValidation.Value, null))
            {
                var exceptionMessage = BuildArgumentExceptionMessage(valueValidation, BeNullExceptionMessageSuffix, Include.FailingValue);
                throw new ArgumentException(exceptionMessage);
            }
        }

        private static void NotBeNullInternal(
            ValueValidation valueValidation)
        {
            if (ReferenceEquals(valueValidation.Value, null))
            {
                var exceptionMessage = BuildArgumentExceptionMessage(valueValidation, NotBeNullExceptionMessageSuffix);
                if (valueValidation.IsElementInEnumerable)
                {
                    throw new ArgumentException(exceptionMessage);
                }
                else
                {
                    throw new ArgumentNullException(null, exceptionMessage);
                }
            }
        }

        private static void BeTrueInternal(
            ValueValidation valueValidation)
        {
            var shouldThrow = ReferenceEquals(valueValidation.Value, null) || ((bool)valueValidation.Value != true);
            if (shouldThrow)
            {
                var exceptionMessage = BuildArgumentExceptionMessage(valueValidation, BeTrueExceptionMessageSuffix, Include.FailingValue);
                throw new ArgumentException(exceptionMessage);
            }
        }

        private static void NotBeTrueInternal(
            ValueValidation valueValidation)
        {
            var shouldNotThrow = ReferenceEquals(valueValidation.Value, null) || ((bool)valueValidation.Value == false);
            if (!shouldNotThrow)
            {
                var exceptionMessage = BuildArgumentExceptionMessage(valueValidation, NotBeTrueExceptionMessageSuffix);
                throw new ArgumentException(exceptionMessage);
            }
        }

        private static void BeFalseInternal(
            ValueValidation valueValidation)
        {
            var shouldThrow = ReferenceEquals(valueValidation.Value, null) || (bool)valueValidation.Value;
            if (shouldThrow)
            {
                var exceptionMessage = BuildArgumentExceptionMessage(valueValidation, BeFalseExceptionMessageSuffix, Include.FailingValue);
                throw new ArgumentException(exceptionMessage);
            }
        }

        private static void NotBeFalseInternal(
            ValueValidation valueValidation)
        {
            var shouldNotThrow = ReferenceEquals(valueValidation.Value, null) || (bool)valueValidation.Value;
            if (!shouldNotThrow)
            {
                var exceptionMessage = BuildArgumentExceptionMessage(valueValidation, NotBeFalseExceptionMessageSuffix);
                throw new ArgumentException(exceptionMessage);
            }
        }

        private static void NotBeNullNorWhiteSpaceInternal(
            ValueValidation valueValidation)
        {
            NotBeNullInternal(valueValidation);

            var shouldThrow = string.IsNullOrWhiteSpace((string)valueValidation.Value);
            if (shouldThrow)
            {
                var exceptionMessage = BuildArgumentExceptionMessage(valueValidation, NotBeNullNorWhiteSpaceExceptionMessageSuffix, Include.FailingValue);
                throw new ArgumentException(exceptionMessage);
            }
        }

        private static void BeEmptyGuidInternal(
            ValueValidation valueValidation)
        {
            var shouldThrow = ReferenceEquals(valueValidation.Value, null) || ((Guid)valueValidation.Value != Guid.Empty);
            if (shouldThrow)
            {
                var exceptionMessage = BuildArgumentExceptionMessage(valueValidation, BeEmptyGuidExceptionMessageSuffix, Include.FailingValue);
                throw new ArgumentException(exceptionMessage);
            }
        }

        private static void NotBeEmptyGuidInternal(
            ValueValidation valueValidation)
        {
            var shouldThrow = (!ReferenceEquals(valueValidation.Value, null)) && ((Guid)valueValidation.Value == Guid.Empty);
            if (shouldThrow)
            {
                var exceptionMessage = BuildArgumentExceptionMessage(valueValidation, NotBeEmptyGuidExceptionMessageSuffix);
                throw new ArgumentException(exceptionMessage);
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1820:TestForEmptyStringsUsingStringLength", Justification = "string.IsNullOrEmpty does not work here")]
        private static void BeEmptyStringInternal(
            ValueValidation valueValidation)
        {
            var shouldThrow = (string)valueValidation.Value != string.Empty;

            if (shouldThrow)
            {
                var exceptionMessage = BuildArgumentExceptionMessage(valueValidation, BeEmptyStringExceptionMessageSuffix, Include.FailingValue);
                throw new ArgumentException(exceptionMessage);
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1820:TestForEmptyStringsUsingStringLength", Justification = "string.IsNullOrEmpty does not work here")]
        private static void NotBeEmptyStringInternal(
            ValueValidation valueValidation)
        {
            var shouldThrow = (string)valueValidation.Value == string.Empty;

            if (shouldThrow)
            {
                var exceptionMessage = BuildArgumentExceptionMessage(valueValidation, NotBeEmptyStringExceptionMessageSuffix);
                throw new ArgumentException(exceptionMessage);
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals", MessageId = "unused", Justification = "Cannot iterate without a local")]
        private static void BeEmptyEnumerableInternal(
            ValueValidation valueValidation)
        {
            NotBeNullInternal(valueValidation);

            var valueAsEnumerable = valueValidation.Value as IEnumerable;
            var shouldThrow = false;

            // ReSharper disable once PossibleNullReferenceException
            foreach (var unused in valueAsEnumerable)
            {
                shouldThrow = true;
                break;
            }

            if (shouldThrow)
            {
                var exceptionMessage = BuildArgumentExceptionMessage(valueValidation, BeEmptyEnumerableExceptionMessageSuffix);
                throw new ArgumentException(exceptionMessage);
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals", MessageId = "unused", Justification = "Cannot iterate without a local")]
        private static void NotBeEmptyEnumerableInternal(
            ValueValidation valueValidation)
        {
            NotBeNullInternal(valueValidation);

            var valueAsEnumerable = valueValidation.Value as IEnumerable;
            var shouldThrow = true;

            // ReSharper disable once PossibleNullReferenceException
            foreach (var unused in valueAsEnumerable)
            {
                shouldThrow = false;
                break;
            }

            if (shouldThrow)
            {
                var exceptionMessage = BuildArgumentExceptionMessage(valueValidation, NotBeEmptyEnumerableExceptionMessageSuffix);
                throw new ArgumentException(exceptionMessage);
            }
        }

        private static void ContainSomeNullsInternal(
            ValueValidation valueValidation)
        {
            NotBeNullInternal(valueValidation);

            var valueAsEnumerable = valueValidation.Value as IEnumerable;
            var shouldThrow = true;

            // ReSharper disable once PossibleNullReferenceException
            foreach (var unused in valueAsEnumerable)
            {
                if (ReferenceEquals(unused, null))
                {
                    shouldThrow = false;
                    break;
                }
            }

            if (shouldThrow)
            {
                var exceptionMessage = BuildArgumentExceptionMessage(valueValidation, ContainSomeNullsExceptionMessageSuffix);
                throw new ArgumentException(exceptionMessage);
            }
        }

        private static void NotContainAnyNullsInternal(
            ValueValidation valueValidation)
        {
            NotBeNullInternal(valueValidation);

            var valueAsEnumerable = valueValidation.Value as IEnumerable;
            var shouldThrow = false;

            // ReSharper disable once PossibleNullReferenceException
            foreach (var unused in valueAsEnumerable)
            {
                if (ReferenceEquals(unused, null))
                {
                    shouldThrow = true;
                    break;
                }
            }

            if (shouldThrow)
            {
                var exceptionMessage = BuildArgumentExceptionMessage(valueValidation, NotContainAnyNullsExceptionMessageSuffix);
                throw new ArgumentException(exceptionMessage);
            }
        }

        private static void BeDefaultInternal(
            ValueValidation valueValidation)
        {
            var defaultValue = GetDefaultValue(valueValidation.ValueType);
            var shouldThrow = !EqualUsingDefaultEqualityComparer(valueValidation.ValueType, valueValidation.Value, defaultValue);
            if (shouldThrow)
            {
                var exceptionMessage = BuildArgumentExceptionMessage(valueValidation, BeDefaultExceptionMessageSuffix, Include.FailingValue | Include.GenericType);
                throw new ArgumentException(exceptionMessage);
            }
        }

        private static void NotBeDefaultInternal(
            ValueValidation valueValidation)
        {
            var defaultValue = GetDefaultValue(valueValidation.ValueType);
            var shouldThrow = EqualUsingDefaultEqualityComparer(valueValidation.ValueType, valueValidation.Value, defaultValue);
            if (shouldThrow)
            {
                var exceptionMessage = BuildArgumentExceptionMessage(valueValidation, NotBeDefaultExceptionMessageSuffix, Include.GenericType);
                throw new ArgumentException(exceptionMessage);
            }
        }

        private static void BeLessThanInternal(
            ValueValidation valueValidation)
        {
            var shouldThrow = CompareUsingDefaultComparer(valueValidation.ValueType, valueValidation.Value, valueValidation.ValidationParameters[0].Value) != CompareOutcome.Value1LessThanValue2;
            if (shouldThrow)
            {
                var exceptionMessage = BuildArgumentExceptionMessage(valueValidation, BeLessThanExceptionMessageSuffix, Include.FailingValue | Include.GenericType);

                if (valueValidation.IsElementInEnumerable)
                {
                    throw new ArgumentException(exceptionMessage);
                }
                else
                {
                    throw new ArgumentOutOfRangeException(exceptionMessage, (Exception)null);
                }
            }
        }

        private static void NotBeLessThanInternal(
            ValueValidation valueValidation)
        {
            var shouldThrow = CompareUsingDefaultComparer(valueValidation.ValueType, valueValidation.Value, valueValidation.ValidationParameters[0].Value) == CompareOutcome.Value1LessThanValue2;
            if (shouldThrow)
            {
                var exceptionMessage = BuildArgumentExceptionMessage(valueValidation, NotBeLessThanExceptionMessageSuffix, Include.FailingValue | Include.GenericType);

                if (valueValidation.IsElementInEnumerable)
                {
                    throw new ArgumentException(exceptionMessage);
                }
                else
                {
                    throw new ArgumentOutOfRangeException(exceptionMessage, (Exception)null);
                }
            }
        }

        private static void BeGreaterThanInternal(
            ValueValidation valueValidation)
        {
            var shouldThrow = CompareUsingDefaultComparer(valueValidation.ValueType, valueValidation.Value, valueValidation.ValidationParameters[0].Value) != CompareOutcome.Value1GreaterThanValue2;
            if (shouldThrow)
            {
                var exceptionMessage = BuildArgumentExceptionMessage(valueValidation, BeGreaterThanExceptionMessageSuffix, Include.FailingValue | Include.GenericType);

                if (valueValidation.IsElementInEnumerable)
                {
                    throw new ArgumentException(exceptionMessage);
                }
                else
                {
                    throw new ArgumentOutOfRangeException(exceptionMessage, (Exception)null);
                }
            }
        }

        private static void NotBeGreaterThanInternal(
            ValueValidation valueValidation)
        {
            var shouldThrow = CompareUsingDefaultComparer(valueValidation.ValueType, valueValidation.Value, valueValidation.ValidationParameters[0].Value) == CompareOutcome.Value1GreaterThanValue2;
            if (shouldThrow)
            {
                var exceptionMessage = BuildArgumentExceptionMessage(valueValidation, NotBeGreaterThanExceptionMessageSuffix, Include.FailingValue | Include.GenericType);

                if (valueValidation.IsElementInEnumerable)
                {
                    throw new ArgumentException(exceptionMessage);
                }
                else
                {
                    throw new ArgumentOutOfRangeException(exceptionMessage, (Exception)null);
                }
            }
        }

        private static void BeLessThanOrEqualToInternal(
            ValueValidation valueValidation)
        {
            var shouldThrow = CompareUsingDefaultComparer(valueValidation.ValueType, valueValidation.Value, valueValidation.ValidationParameters[0].Value) == CompareOutcome.Value1GreaterThanValue2;
            if (shouldThrow)
            {
                var exceptionMessage = BuildArgumentExceptionMessage(valueValidation, BeLessThanOrEqualToExceptionMessageSuffix, Include.FailingValue | Include.GenericType);

                if (valueValidation.IsElementInEnumerable)
                {
                    throw new ArgumentException(exceptionMessage);
                }
                else
                {
                    throw new ArgumentOutOfRangeException(exceptionMessage, (Exception)null);
                }
            }
        }

        private static void NotBeLessThanOrEqualToInternal(
            ValueValidation valueValidation)
        {
            var shouldThrow = CompareUsingDefaultComparer(valueValidation.ValueType, valueValidation.Value, valueValidation.ValidationParameters[0].Value) != CompareOutcome.Value1GreaterThanValue2;
            if (shouldThrow)
            {
                var exceptionMessage = BuildArgumentExceptionMessage(valueValidation, NotBeLessThanOrEqualToExceptionMessageSuffix, Include.FailingValue | Include.GenericType);

                if (valueValidation.IsElementInEnumerable)
                {
                    throw new ArgumentException(exceptionMessage);
                }
                else
                {
                    throw new ArgumentOutOfRangeException(exceptionMessage, (Exception)null);
                }
            }
        }

        private static void BeGreaterThanOrEqualToInternal(
            ValueValidation valueValidation)
        {
            var shouldThrow = CompareUsingDefaultComparer(valueValidation.ValueType, valueValidation.Value, valueValidation.ValidationParameters[0].Value) == CompareOutcome.Value1LessThanValue2;
            if (shouldThrow)
            {
                var exceptionMessage = BuildArgumentExceptionMessage(valueValidation, BeGreaterThanOrEqualToExceptionMessageSuffix, Include.FailingValue | Include.GenericType);

                if (valueValidation.IsElementInEnumerable)
                {
                    throw new ArgumentException(exceptionMessage);
                }
                else
                {
                    throw new ArgumentOutOfRangeException(exceptionMessage, (Exception)null);
                }
            }
        }

        private static void NotBeGreaterThanOrEqualToInternal(
            ValueValidation valueValidation)
        {
            var shouldThrow = CompareUsingDefaultComparer(valueValidation.ValueType, valueValidation.Value, valueValidation.ValidationParameters[0].Value) != CompareOutcome.Value1LessThanValue2;
            if (shouldThrow)
            {
                var exceptionMessage = BuildArgumentExceptionMessage(valueValidation, NotBeGreaterThanOrEqualToExceptionMessageSuffix, Include.FailingValue | Include.GenericType);

                if (valueValidation.IsElementInEnumerable)
                {
                    throw new ArgumentException(exceptionMessage);
                }
                else
                {
                    throw new ArgumentOutOfRangeException(exceptionMessage, (Exception)null);
                }
            }
        }

        private static void BeEqualToInternal(
            ValueValidation valueValidation)
        {
            var shouldThrow = !EqualUsingDefaultEqualityComparer(valueValidation.ValueType, valueValidation.Value, valueValidation.ValidationParameters[0].Value);
            if (shouldThrow)
            {
                var exceptionMessage = BuildArgumentExceptionMessage(valueValidation, BeEqualToExceptionMessageSuffix, Include.FailingValue | Include.GenericType);
                if (valueValidation.IsElementInEnumerable)
                {
                    throw new ArgumentException(exceptionMessage);
                }
                else
                {
                    throw new ArgumentOutOfRangeException(exceptionMessage, (Exception)null);
                }
            }
        }

        private static void NotBeEqualToInternal(
            ValueValidation valueValidation)
        {
            var shouldThrow = EqualUsingDefaultEqualityComparer(valueValidation.ValueType, valueValidation.Value, valueValidation.ValidationParameters[0].Value);
            if (shouldThrow)
            {
                var exceptionMessage = BuildArgumentExceptionMessage(valueValidation, NotBeEqualToExceptionMessageSuffix, Include.GenericType);
                if (valueValidation.IsElementInEnumerable)
                {
                    throw new ArgumentException(exceptionMessage);
                }
                else
                {
                    throw new ArgumentOutOfRangeException(exceptionMessage, (Exception)null);
                }
            }
        }

        private static void BeInRangeInternal(
            ValueValidation valueValidation)
        {
            ThrowIfMalformedRange(valueValidation.ValidationParameters);

            var shouldThrow = (CompareUsingDefaultComparer(valueValidation.ValueType, valueValidation.Value, valueValidation.ValidationParameters[0].Value) == CompareOutcome.Value1LessThanValue2) ||
                              (CompareUsingDefaultComparer(valueValidation.ValueType, valueValidation.Value, valueValidation.ValidationParameters[1].Value) == CompareOutcome.Value1GreaterThanValue2);

            if (shouldThrow)
            {
                var exceptionMessage = BuildArgumentExceptionMessage(valueValidation, BeInRangeExceptionMessageSuffix, Include.FailingValue | Include.GenericType);

                if (valueValidation.IsElementInEnumerable)
                {
                    throw new ArgumentException(exceptionMessage);
                }
                else
                {
                    throw new ArgumentOutOfRangeException(exceptionMessage, (Exception)null);
                }
            }
        }

        private static void NotBeInRangeInternal(
            ValueValidation valueValidation)
        {
            ThrowIfMalformedRange(valueValidation.ValidationParameters);

            var shouldThrow = (CompareUsingDefaultComparer(valueValidation.ValueType, valueValidation.Value, valueValidation.ValidationParameters[0].Value) != CompareOutcome.Value1LessThanValue2) &&
                              (CompareUsingDefaultComparer(valueValidation.ValueType, valueValidation.Value, valueValidation.ValidationParameters[1].Value) != CompareOutcome.Value1GreaterThanValue2);

            if (shouldThrow)
            {
                var exceptionMessage = BuildArgumentExceptionMessage(valueValidation, NotBeInRangeExceptionMessageSuffix, Include.GenericType);

                if (valueValidation.IsElementInEnumerable)
                {
                    throw new ArgumentException(exceptionMessage);
                }
                else
                {
                    throw new ArgumentOutOfRangeException(exceptionMessage, (Exception)null);
                }
            }
        }

        private static void ContainInternal(
            ValueValidation valueValidation)
        {
            NotBeNullInternal(valueValidation);

            var valueAsEnumerable = (IEnumerable)valueValidation.Value;
            var searchForItem = valueValidation.ValidationParameters[0].Value;
            var elementType = valueValidation.ValidationParameters[0].ValueType;
            foreach (var element in valueAsEnumerable)
            {
                if (EqualUsingDefaultEqualityComparer(elementType, element, searchForItem))
                {
                    return;
                }
            }

            var exceptionMessage = BuildArgumentExceptionMessage(valueValidation, ContainExceptionMessageSuffix, Include.GenericType, genericTypeOverride: elementType);
            throw new ArgumentException(exceptionMessage);
        }

        private static void NotContainInternal(
            ValueValidation valueValidation)
        {
            NotBeNullInternal(valueValidation);

            var valueAsEnumerable = (IEnumerable)valueValidation.Value;
            var searchForItem = valueValidation.ValidationParameters[0].Value;
            var elementType = valueValidation.ValidationParameters[0].ValueType;
            foreach (var element in valueAsEnumerable)
            {
                if (EqualUsingDefaultEqualityComparer(elementType, element, searchForItem))
                {
                    var exceptionMessage = BuildArgumentExceptionMessage(valueValidation, NotContainExceptionMessageSuffix, Include.GenericType, genericTypeOverride: elementType);
                    throw new ArgumentException(exceptionMessage);
                }
            }
        }
    }
}
